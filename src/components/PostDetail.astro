---
import type { CollectionEntry } from "astro:content";
import DefaultLayout from "@layouts/default.astro";
import ArticleTags from "@components/ArticleTags/index.astro";
import MenuIcons from "./Header/MenuIcons.astro";
import { slug as ghSlug } from "github-slugger";
import { SiteConfig } from "@config";
import RecentPosts from "@components/RecentPosts/index.astro";
import TimeAgo from "@components/TimeAgo";

const { post } = Astro.props as {
  post: CollectionEntry<"blog">;
  recentPosts: CollectionEntry<"blog">[];
};

const {
  data: {
    title,
    description,
    ogImage,
    canonical,
    tags,
    pubDatetime,
    modDatetime,
    author,
  },
} = post;

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;

const ogUrl = new URL(
  ogImageUrl ?? `/posts/${ghSlug(title)}.png`,
  Astro.url.origin
).href;

const layoutProps = {
  title: `Blog - ${title}`,
  description,
  ogImage: ogUrl,
  canonical,
  author,
  pubDatetime,
  modDatetime,
};
const { Content } = await post.render();
---

<DefaultLayout {...layoutProps}>
  <div class="flex justify-between items-center">
    <a href="/" class="text-black dark:text-sky-500 font-semibold text-xl"
      >@{SiteConfig.author}</a
    >
    <div class="flex gap-4">
      <i
        class="i-mdi-keyboard-backspace cursor-pointer hover:scale-110 text-sky-400 transition-all"
        id="_back_"></i>
      <MenuIcons />
    </div>
  </div>

  <!-- Title -->
  <h1 class="text-4xl pt-8" transition:name={ghSlug(title)}>{title}</h1>
  <div class="flex items-center gap-1 mb-4">
    <i class="i-mdi-calendar-month"></i>
    <TimeAgo client:only="react" date={modDatetime ?? pubDatetime} />
  </div>
  <article
    id="content"
    class="prose lg:prose-xl dark:prose-invert prose-a:text-blue-600 hover:prose-a:text-blue-500"
  >
    <Content />
  </article>

  <!-- Tags -->
  <ArticleTags tags={tags} />
  <RecentPosts recentPosts={Astro.props.recentPosts} />
  <button
    id="back-to-top"
    class="fixed bottom-4 right-4 bg-skin-base opacity-35 hover:opacity-100 text-teal-400 p-2 rounded-full shadow-lg hover:shadow-xl transition-all z-50"
  >
    <i class="i-mdi-arrow-up-circle-outline text-2xl"></i>
  </button>
</DefaultLayout>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const back = document.getElementById("_back_");
    back.addEventListener("click", () => {
      if (window.history.length > 1) {
        window.history.back();
      } else {
        window.location.href = window.location.origin;
      }
    });
  });

  function addHeadingLinks() {
    let headings = Array.from(document.querySelectorAll("h2, h3, h4, h5, h6"));
    for (let heading of headings) {
      heading.classList.add("group");
      let link = document.createElement("a");
      link.innerText = "#";
      link.className = "heading-link hidden group-hover:inline-block ml-2";
      link.href = "#" + heading.id;
      link.ariaHidden = "true";
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    let copyButtonLabel = "Copy";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      codeBlock.classList.add("group");
      let wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      let copyButton = document.createElement("button");
      copyButton.className =
        "bg-green-500 text-white absolute right-1 top-1 transition-all opacity-0 group-hover:opacity-100 rounded bg-skin-card px-2 py-1 text-xs leading-4 text-skin-base font-medium";
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();

  /** Scrolls the document to the top when
   * the "Back to Top" button is clicked. */
  function backToTop() {
    document.querySelector("#back-to-top")?.addEventListener("click", () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
    document.addEventListener("scroll", () => {
      let backToTopButton = document.querySelector("#back-to-top");
      if (
        document.body.scrollTop > 100 ||
        document.documentElement.scrollTop > 100
      ) {
        backToTopButton.style.display = "block";
      } else {
        backToTopButton.style.display = "none";
      }
    });
  }
  backToTop();
</script>
