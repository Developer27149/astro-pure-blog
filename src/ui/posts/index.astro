---
import { calcRelativeDate } from "@utils/formatDate";
import type { CollectionEntry } from "astro:content";
import { format } from "date-fns";
import { slug as ghSlug } from "github-slugger";
export interface Props {
  posts: CollectionEntry<"blog">[];
}

const { posts } = Astro.props;
---

<main>
  <h1
    class="inline-block py-24 text-2xl font-semibold origin-center hover:scale-105 transition-all"
  >
    BLOG
  </h1>
  <ul>
    {
      posts.map(({ slug, data }, idx) => (
        <li
          class="group flex items-center gap-12 md:gap-8 py-2 animate-fade-left mb-2"
          style={`animation-delay:${idx * 70}ms`}
          transition:name={ghSlug(slug)}
        >
          <span class="hidden md:inline-block rounded-sm p-[2px] px-[4px] text-sm min-w-[100px]">
            {calcRelativeDate(data.modDatetime ?? data.pubDatetime)}
          </span>
          <span class="md:hidden inline-block rounded-sm p-[2px] px-[4px] skew-x-6">
            {format(new Date(data.modDatetime ?? data.pubDatetime), "yyyy/MM")}
          </span>
          <a
            class="group-hover:underline underline-offset-4 font-thin decoration-sky-200 transition-all cursor-pointer dark:text-teal-300"
            style=""
            href={`/posts/${slug}`}
            data-description={data.description}
          >
            {slug}
          </a>
        </li>
      ))
    }
  </ul>
</main>
<div
  id="description-elem"
  style="left: var(--x);bottom: var(--y);"
  class="absolute transition-all z-[999] bg-gray-800 text-sky-100 dark:bg-gray-900 rounded-sm shadow dark:text-sky-300 max-w-[400px]"
>
</div>

<script is:inline>
  // thanks for the code: https://stackoverflow.com/questions/7790725/javascript-track-mouse-position
  function handleMouseMove(event) {
    var eventDoc, doc, body;
    event = event || window.event; // IE-ism
    // If pageX/Y aren't available and clientX/Y are,
    // calculate pageX/Y - logic taken from jQuery.
    // (This is to support old IE)
    if (event.pageX == null && event.clientX != null) {
      eventDoc = (event.target && event.target.ownerDocument) || document;
      doc = eventDoc.documentElement;
      body = eventDoc.body;
      event.pageX =
        event.clientX +
        ((doc && doc.scrollLeft) || (body && body.scrollLeft) || 0) -
        ((doc && doc.clientLeft) || (body && body.clientLeft) || 0);
      event.pageY =
        event.clientY +
        ((doc && doc.scrollTop) || (body && body.scrollTop) || 0) -
        ((doc && doc.clientTop) || (body && body.clientTop) || 0);
    }
    // get window's width
    const windowWidth = window.innerWidth;
    // Use event.pageX / event.pageY here
    const calibrateX = Math.min(event.pageX + 60, windowWidth - 460);

    document
      .getElementById("description-elem")
      .style.setProperty("--x", `${calibrateX}px`);
    document
      .getElementById("description-elem")
      .style.setProperty("--y", `calc(100vh - ${event.pageY + 24}px)`);
  }

  document.body.addEventListener("mousemove", handleMouseMove);

  const posts = document.querySelectorAll("main li a[data-description]");
  const descriptionElem = document.getElementById("description-elem");
  descriptionElem.addEventListener("animationend", () => {
    if (descriptionElem.classList.contains("animate-jump-out")) {
      descriptionElem.classList.add("hidden");
    }
  });
  let noder;
  posts.forEach((post) => {
    post.addEventListener("mouseenter", () => {
      noder = setTimeout(() => {
        descriptionElem.classList.remove("hidden");
        descriptionElem.classList.add("animate-jump");
        descriptionElem.classList.add("p-2");
        descriptionElem.classList.remove("animate-jump-out");
        const description = post.getAttribute("data-description");
        descriptionElem.innerHTML = description;
      }, 1000 * 0.8);
    });
    post.addEventListener("mouseleave", () => {
      clearTimeout(noder);
      descriptionElem.classList.remove("animate-jump");
      descriptionElem.classList.add("animate-jump-out");
    });
  });
</script>
